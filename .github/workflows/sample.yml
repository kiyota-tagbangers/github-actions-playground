name: "sample"
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '*'
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
jobs:
  sample:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Tokyo'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # 'corretto' は java-version 17 が使用できない
          architecture: 'x86'
      - id: check-application-version
        name: check application version
        run: |
          VERSION=$(cat ./application-version.txt)
          echo "VERSION=${VERSION}" | tee $GITHUB_OUTPUT
      - id: get-latest-jar-link
        name: get latest jar link from GitHub Packages
        # *-sources.jar の URL は不要なため除外
        # ex.) demo-batch-0.0.1-20231115.022451-1-sources.jar
        run: |
          LINK=$(gh api graphql \
          -f packageType="MAVEN" \
          -f owner=kiyota-tagbangers \
          -f repo=demo-batch \
          -f packageName="com.example.demo-batch" \
          -f packageVersion="${{ steps.check-application-version.outputs.VERSION }}" \
          -f query='
          query ($packageType: PackageType!, $owner: String!, $repo: String!, $packageName: [String!], $packageVersion: String!) {
            repository(owner: $owner, name: $repo) {
              packages(first: 100, packageType: $packageType, names: $packageName) {
                edges {
                  node {
                    version(version: $packageVersion) {
                      files(first: 10, orderBy: {field: CREATED_AT, direction: DESC} ) {
                        nodes {
                          name
                          url
                        }
                      }
                    }
                  }
                }
              }
            }
          }' \
          --jq '[.data.repository.packages.edges[].node.version.files.nodes[] | select(.name | endswith(".jar") and (. | test(".*-sources\\.jar") | not))] | max_by(.updatedAt) | .url')
          echo "LINK=${LINK}" | tee $GITHUB_OUTPUT
        env:
           GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN}}
      - id: download-and-start-app
        name: download jar and start app
        run: |
          curl -L "${{ steps.get-latest-jar-link.outputs.LINK }}" -o app.jar
          ls -lh app.jar
          java -jar app.jar

      - name: Echo
        run: echo "Hello, GitHub Actions!"

#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: arn:aws:iam::449459699271:role/kiyota-codedeploy-test-gh-actions-java-cli-app
#          aws-region: "ap-northeast-1"
#      - name: Push a revision for CodeDeploy
#        run: |
#          aws deploy push \
#            --application-name kiyota-codedeploy-test \
#            --s3-location s3://kiyota-codedeploy-test-codedeploy-revision/demo-batch.zip \
#            --source . \
#            --description "from GitHub Actions"
#      - name: Deploy to Amazon EC2
#        run: |
#          aws deploy create-deployment \
#            --application-name kiyota-codedeploy-test \
#            --s3-location bucket=kiyota-codedeploy-test-codedeploy-revision,key=demo-batch.zip,bundleType=zip \
#            --deployment-config-name CodeDeployDefault.OneAtATime \
#            --deployment-group kiyota-codedeploy-test
